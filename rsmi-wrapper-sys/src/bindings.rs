/* automatically generated by rust-bindgen 0.60.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const __BITS_PER_LONG: u32 = 64;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const KFD_IOCTL_MAJOR_VERSION: u32 = 1;
pub const KFD_IOCTL_MINOR_VERSION: u32 = 2;
pub const KFD_IOCTL_DBG_MAJOR_VERSION: u32 = 1;
pub const KFD_IOCTL_DBG_MINOR_VERSION: u32 = 0;
pub const KFD_IOC_QUEUE_TYPE_COMPUTE: u32 = 0;
pub const KFD_IOC_QUEUE_TYPE_SDMA: u32 = 1;
pub const KFD_IOC_QUEUE_TYPE_COMPUTE_AQL: u32 = 2;
pub const KFD_IOC_QUEUE_TYPE_SDMA_XGMI: u32 = 3;
pub const KFD_MAX_QUEUE_PERCENTAGE: u32 = 100;
pub const KFD_MAX_QUEUE_PRIORITY: u32 = 15;
pub const KFD_IOC_CACHE_POLICY_COHERENT: u32 = 0;
pub const KFD_IOC_CACHE_POLICY_NONCOHERENT: u32 = 1;
pub const NUM_OF_SUPPORTED_GPUS: u32 = 7;
pub const MAX_ALLOWED_NUM_POINTS: u32 = 100;
pub const MAX_ALLOWED_AW_BUFF_SIZE: u32 = 4096;
pub const MAX_ALLOWED_WAC_BUFF_SIZE: u32 = 128;
pub const KFD_DBG_EV_STATUS_TRAP: u32 = 1;
pub const KFD_DBG_EV_STATUS_VMFAULT: u32 = 2;
pub const KFD_DBG_EV_STATUS_SUSPENDED: u32 = 4;
pub const KFD_DBG_EV_STATUS_NEW_QUEUE: u32 = 8;
pub const KFD_DBG_EV_FLAG_CLEAR_STATUS: u32 = 1;
pub const KFD_INVALID_QUEUEID: u32 = 4294967295;
pub const KFD_IOC_DBG_TRAP_ENABLE: u32 = 0;
pub const KFD_IOC_DBG_TRAP_SET_WAVE_LAUNCH_OVERRIDE: u32 = 1;
pub const KFD_IOC_DBG_TRAP_SET_WAVE_LAUNCH_MODE: u32 = 2;
pub const KFD_IOC_DBG_TRAP_NODE_SUSPEND: u32 = 3;
pub const KFD_IOC_DBG_TRAP_NODE_RESUME: u32 = 4;
pub const KFD_IOC_DBG_TRAP_QUERY_DEBUG_EVENT: u32 = 5;
pub const KFD_IOC_DBG_TRAP_GET_QUEUE_SNAPSHOT: u32 = 6;
pub const KFD_IOC_DBG_TRAP_GET_VERSION: u32 = 7;
pub const KFD_IOC_EVENT_SIGNAL: u32 = 0;
pub const KFD_IOC_EVENT_NODECHANGE: u32 = 1;
pub const KFD_IOC_EVENT_DEVICESTATECHANGE: u32 = 2;
pub const KFD_IOC_EVENT_HW_EXCEPTION: u32 = 3;
pub const KFD_IOC_EVENT_SYSTEM_EVENT: u32 = 4;
pub const KFD_IOC_EVENT_DEBUG_EVENT: u32 = 5;
pub const KFD_IOC_EVENT_PROFILE_EVENT: u32 = 6;
pub const KFD_IOC_EVENT_QUEUE_EVENT: u32 = 7;
pub const KFD_IOC_EVENT_MEMORY: u32 = 8;
pub const KFD_IOC_WAIT_RESULT_COMPLETE: u32 = 0;
pub const KFD_IOC_WAIT_RESULT_TIMEOUT: u32 = 1;
pub const KFD_IOC_WAIT_RESULT_FAIL: u32 = 2;
pub const KFD_SIGNAL_EVENT_LIMIT: u32 = 4096;
pub const KFD_HW_EXCEPTION_WHOLE_GPU_RESET: u32 = 0;
pub const KFD_HW_EXCEPTION_PER_ENGINE_RESET: u32 = 1;
pub const KFD_HW_EXCEPTION_GPU_HANG: u32 = 0;
pub const KFD_HW_EXCEPTION_ECC: u32 = 1;
pub const KFD_MEM_ERR_NO_RAS: u32 = 0;
pub const KFD_MEM_ERR_SRAM_ECC: u32 = 1;
pub const KFD_MEM_ERR_POISON_CONSUMED: u32 = 2;
pub const KFD_MEM_ERR_GPU_HANG: u32 = 3;
pub const KFD_IOC_ALLOC_MEM_FLAGS_VRAM: u32 = 1;
pub const KFD_IOC_ALLOC_MEM_FLAGS_GTT: u32 = 2;
pub const KFD_IOC_ALLOC_MEM_FLAGS_USERPTR: u32 = 4;
pub const KFD_IOC_ALLOC_MEM_FLAGS_DOORBELL: u32 = 8;
pub const KFD_IOC_ALLOC_MEM_FLAGS_MMIO_REMAP: u32 = 16;
pub const KFD_IOC_ALLOC_MEM_FLAGS_WRITABLE: u32 = 2147483648;
pub const KFD_IOC_ALLOC_MEM_FLAGS_EXECUTABLE: u32 = 1073741824;
pub const KFD_IOC_ALLOC_MEM_FLAGS_PUBLIC: u32 = 536870912;
pub const KFD_IOC_ALLOC_MEM_FLAGS_NO_SUBSTITUTE: u32 = 268435456;
pub const KFD_IOC_ALLOC_MEM_FLAGS_AQL_QUEUE_MEM: u32 = 134217728;
pub const KFD_IOC_ALLOC_MEM_FLAGS_COHERENT: u32 = 67108864;
pub const KFD_CROSS_MEMORY_RW_BIT: u32 = 1;
pub const AMDKFD_IOCTL_BASE: u8 = 75u8;
pub const AMDKFD_COMMAND_START: u32 = 1;
pub const AMDKFD_COMMAND_END: u32 = 32;
pub const RSMI_MAX_NUM_FREQUENCIES: u32 = 32;
pub const RSMI_MAX_FAN_SPEED: u32 = 255;
pub const RSMI_NUM_VOLTAGE_CURVE_POINTS: u32 = 3;
pub const MAX_EVENT_NOTIFICATION_MSG_SIZE: u32 = 64;
pub const RSMI_GPU_METRICS_API_FORMAT_VER: u32 = 1;
pub const RSMI_GPU_METRICS_API_CONTENT_VER_1: u32 = 1;
pub const RSMI_GPU_METRICS_API_CONTENT_VER_2: u32 = 2;
pub const RSMI_GPU_METRICS_API_CONTENT_VER_3: u32 = 3;
pub const RSMI_NUM_HBM_INSTANCES: u32 = 4;
pub const CENTRIGRADE_TO_MILLI_CENTIGRADE: u32 = 1000;
pub const RSMI_DEFAULT_VARIANT: i32 = -1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_get_version_args {
    pub major_version: __u32,
    pub minor_version: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_create_queue_args {
    pub ring_base_address: __u64,
    pub write_pointer_address: __u64,
    pub read_pointer_address: __u64,
    pub doorbell_offset: __u64,
    pub ring_size: __u32,
    pub gpu_id: __u32,
    pub queue_type: __u32,
    pub queue_percentage: __u32,
    pub queue_priority: __u32,
    pub queue_id: __u32,
    pub eop_buffer_address: __u64,
    pub eop_buffer_size: __u64,
    pub ctx_save_restore_address: __u64,
    pub ctx_save_restore_size: __u32,
    pub ctl_stack_size: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_destroy_queue_args {
    pub queue_id: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_update_queue_args {
    pub ring_base_address: __u64,
    pub queue_id: __u32,
    pub ring_size: __u32,
    pub queue_percentage: __u32,
    pub queue_priority: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_set_cu_mask_args {
    pub queue_id: __u32,
    pub num_cu_mask: __u32,
    pub cu_mask_ptr: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_get_queue_wave_state_args {
    pub ctl_stack_address: __u64,
    pub ctl_stack_used_size: __u32,
    pub save_area_used_size: __u32,
    pub queue_id: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_queue_snapshot_entry {
    pub ring_base_address: __u64,
    pub write_pointer_address: __u64,
    pub read_pointer_address: __u64,
    pub ctx_save_restore_address: __u64,
    pub queue_id: __u32,
    pub gpu_id: __u32,
    pub ring_size: __u32,
    pub queue_type: __u32,
    pub queue_status: __u32,
    pub reserved: [__u32; 19usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_set_memory_policy_args {
    pub alternate_aperture_base: __u64,
    pub alternate_aperture_size: __u64,
    pub gpu_id: __u32,
    pub default_policy: __u32,
    pub alternate_policy: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_get_clock_counters_args {
    pub gpu_clock_counter: __u64,
    pub cpu_clock_counter: __u64,
    pub system_clock_counter: __u64,
    pub system_clock_freq: __u64,
    pub gpu_id: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_process_device_apertures {
    pub lds_base: __u64,
    pub lds_limit: __u64,
    pub scratch_base: __u64,
    pub scratch_limit: __u64,
    pub gpuvm_base: __u64,
    pub gpuvm_limit: __u64,
    pub gpu_id: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_get_process_apertures_args {
    pub process_apertures: [kfd_process_device_apertures; 7usize],
    pub num_of_nodes: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_get_process_apertures_new_args {
    pub kfd_process_device_apertures_ptr: __u64,
    pub num_of_nodes: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_dbg_register_args {
    pub gpu_id: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_dbg_unregister_args {
    pub gpu_id: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_dbg_address_watch_args {
    pub content_ptr: __u64,
    pub gpu_id: __u32,
    pub buf_size_in_bytes: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_dbg_wave_control_args {
    pub content_ptr: __u64,
    pub gpu_id: __u32,
    pub buf_size_in_bytes: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_dbg_trap_args {
    pub ptr: __u64,
    pub pid: __u32,
    pub gpu_id: __u32,
    pub op: __u32,
    pub data1: __u32,
    pub data2: __u32,
    pub data3: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_create_event_args {
    pub event_page_offset: __u64,
    pub event_trigger_data: __u32,
    pub event_type: __u32,
    pub auto_reset: __u32,
    pub node_id: __u32,
    pub event_id: __u32,
    pub event_slot_index: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_destroy_event_args {
    pub event_id: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_set_event_args {
    pub event_id: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_reset_event_args {
    pub event_id: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_memory_exception_failure {
    pub NotPresent: __u32,
    pub ReadOnly: __u32,
    pub NoExecute: __u32,
    pub imprecise: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_hsa_memory_exception_data {
    pub failure: kfd_memory_exception_failure,
    pub va: __u64,
    pub gpu_id: __u32,
    pub ErrorType: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_hsa_hw_exception_data {
    pub reset_type: __u32,
    pub reset_cause: __u32,
    pub memory_lost: __u32,
    pub gpu_id: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kfd_event_data {
    pub __bindgen_anon_1: kfd_event_data__bindgen_ty_1,
    pub kfd_event_data_ext: __u64,
    pub event_id: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kfd_event_data__bindgen_ty_1 {
    pub memory_exception_data: kfd_hsa_memory_exception_data,
    pub hw_exception_data: kfd_hsa_hw_exception_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_wait_events_args {
    pub events_ptr: __u64,
    pub num_events: __u32,
    pub wait_for_all: __u32,
    pub timeout: __u32,
    pub wait_result: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_set_scratch_backing_va_args {
    pub va_addr: __u64,
    pub gpu_id: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_get_tile_config_args {
    pub tile_config_ptr: __u64,
    pub macro_tile_config_ptr: __u64,
    pub num_tile_configs: __u32,
    pub num_macro_tile_configs: __u32,
    pub gpu_id: __u32,
    pub gb_addr_config: __u32,
    pub num_banks: __u32,
    pub num_ranks: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_set_trap_handler_args {
    pub tba_addr: __u64,
    pub tma_addr: __u64,
    pub gpu_id: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_acquire_vm_args {
    pub drm_fd: __u32,
    pub gpu_id: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_alloc_memory_of_gpu_args {
    pub va_addr: __u64,
    pub size: __u64,
    pub handle: __u64,
    pub mmap_offset: __u64,
    pub gpu_id: __u32,
    pub flags: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_free_memory_of_gpu_args {
    pub handle: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_map_memory_to_gpu_args {
    pub handle: __u64,
    pub device_ids_array_ptr: __u64,
    pub n_devices: __u32,
    pub n_success: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_unmap_memory_from_gpu_args {
    pub handle: __u64,
    pub device_ids_array_ptr: __u64,
    pub n_devices: __u32,
    pub n_success: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_alloc_queue_gws_args {
    pub queue_id: __u32,
    pub num_gws: __u32,
    pub first_gws: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_get_dmabuf_info_args {
    pub size: __u64,
    pub metadata_ptr: __u64,
    pub metadata_size: __u32,
    pub gpu_id: __u32,
    pub flags: __u32,
    pub dmabuf_fd: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_import_dmabuf_args {
    pub va_addr: __u64,
    pub handle: __u64,
    pub gpu_id: __u32,
    pub dmabuf_fd: __u32,
}
pub const kfd_smi_event_KFD_SMI_EVENT_NONE: kfd_smi_event = 0;
pub const kfd_smi_event_KFD_SMI_EVENT_VMFAULT: kfd_smi_event = 1;
pub const kfd_smi_event_KFD_SMI_EVENT_THERMAL_THROTTLE: kfd_smi_event = 2;
pub const kfd_smi_event_KFD_SMI_EVENT_GPU_PRE_RESET: kfd_smi_event = 3;
pub const kfd_smi_event_KFD_SMI_EVENT_GPU_POST_RESET: kfd_smi_event = 4;
pub type kfd_smi_event = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_smi_events_args {
    pub gpuid: __u32,
    pub anon_fd: __u32,
}
pub const kfd_mmio_remap_KFD_MMIO_REMAP_HDP_MEM_FLUSH_CNTL: kfd_mmio_remap = 0;
pub const kfd_mmio_remap_KFD_MMIO_REMAP_HDP_REG_FLUSH_CNTL: kfd_mmio_remap = 4;
pub type kfd_mmio_remap = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_ipc_export_handle_args {
    pub handle: __u64,
    pub share_handle: [__u32; 4usize],
    pub gpu_id: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_ipc_import_handle_args {
    pub handle: __u64,
    pub va_addr: __u64,
    pub mmap_offset: __u64,
    pub share_handle: [__u32; 4usize],
    pub gpu_id: __u32,
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_memory_range {
    pub va_addr: __u64,
    pub size: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kfd_ioctl_cross_memory_copy_args {
    pub pid: __u32,
    pub flags: __u32,
    pub src_mem_range_array: __u64,
    pub src_mem_array_size: __u64,
    pub dst_mem_range_array: __u64,
    pub dst_mem_array_size: __u64,
    pub bytes_copied: __u64,
}
pub const rsmi_status_t_RSMI_STATUS_SUCCESS: rsmi_status_t = 0;
pub const rsmi_status_t_RSMI_STATUS_INVALID_ARGS: rsmi_status_t = 1;
pub const rsmi_status_t_RSMI_STATUS_NOT_SUPPORTED: rsmi_status_t = 2;
pub const rsmi_status_t_RSMI_STATUS_FILE_ERROR: rsmi_status_t = 3;
pub const rsmi_status_t_RSMI_STATUS_PERMISSION: rsmi_status_t = 4;
pub const rsmi_status_t_RSMI_STATUS_OUT_OF_RESOURCES: rsmi_status_t = 5;
pub const rsmi_status_t_RSMI_STATUS_INTERNAL_EXCEPTION: rsmi_status_t = 6;
pub const rsmi_status_t_RSMI_STATUS_INPUT_OUT_OF_BOUNDS: rsmi_status_t = 7;
pub const rsmi_status_t_RSMI_STATUS_INIT_ERROR: rsmi_status_t = 8;
pub const rsmi_status_t_RSMI_INITIALIZATION_ERROR: rsmi_status_t = 8;
pub const rsmi_status_t_RSMI_STATUS_NOT_YET_IMPLEMENTED: rsmi_status_t = 9;
pub const rsmi_status_t_RSMI_STATUS_NOT_FOUND: rsmi_status_t = 10;
pub const rsmi_status_t_RSMI_STATUS_INSUFFICIENT_SIZE: rsmi_status_t = 11;
pub const rsmi_status_t_RSMI_STATUS_INTERRUPT: rsmi_status_t = 12;
pub const rsmi_status_t_RSMI_STATUS_UNEXPECTED_SIZE: rsmi_status_t = 13;
pub const rsmi_status_t_RSMI_STATUS_NO_DATA: rsmi_status_t = 14;
pub const rsmi_status_t_RSMI_STATUS_UNEXPECTED_DATA: rsmi_status_t = 15;
pub const rsmi_status_t_RSMI_STATUS_BUSY: rsmi_status_t = 16;
pub const rsmi_status_t_RSMI_STATUS_REFCOUNT_OVERFLOW: rsmi_status_t = 17;
pub const rsmi_status_t_RSMI_STATUS_UNKNOWN_ERROR: rsmi_status_t = 4294967295;
pub type rsmi_status_t = ::std::os::raw::c_uint;
pub const rsmi_init_flags_t_RSMI_INIT_FLAG_ALL_GPUS: rsmi_init_flags_t = 1;
pub const rsmi_init_flags_t_RSMI_INIT_FLAG_RESRV_TEST1: rsmi_init_flags_t = 576460752303423488;
pub type rsmi_init_flags_t = ::std::os::raw::c_ulong;
pub const rsmi_dev_perf_level_t_RSMI_DEV_PERF_LEVEL_AUTO: rsmi_dev_perf_level_t = 0;
pub const rsmi_dev_perf_level_t_RSMI_DEV_PERF_LEVEL_FIRST: rsmi_dev_perf_level_t = 0;
pub const rsmi_dev_perf_level_t_RSMI_DEV_PERF_LEVEL_LOW: rsmi_dev_perf_level_t = 1;
pub const rsmi_dev_perf_level_t_RSMI_DEV_PERF_LEVEL_HIGH: rsmi_dev_perf_level_t = 2;
pub const rsmi_dev_perf_level_t_RSMI_DEV_PERF_LEVEL_MANUAL: rsmi_dev_perf_level_t = 3;
pub const rsmi_dev_perf_level_t_RSMI_DEV_PERF_LEVEL_STABLE_STD: rsmi_dev_perf_level_t = 4;
pub const rsmi_dev_perf_level_t_RSMI_DEV_PERF_LEVEL_STABLE_PEAK: rsmi_dev_perf_level_t = 5;
pub const rsmi_dev_perf_level_t_RSMI_DEV_PERF_LEVEL_STABLE_MIN_MCLK: rsmi_dev_perf_level_t = 6;
pub const rsmi_dev_perf_level_t_RSMI_DEV_PERF_LEVEL_STABLE_MIN_SCLK: rsmi_dev_perf_level_t = 7;
pub const rsmi_dev_perf_level_t_RSMI_DEV_PERF_LEVEL_DETERMINISM: rsmi_dev_perf_level_t = 8;
pub const rsmi_dev_perf_level_t_RSMI_DEV_PERF_LEVEL_LAST: rsmi_dev_perf_level_t = 8;
pub const rsmi_dev_perf_level_t_RSMI_DEV_PERF_LEVEL_UNKNOWN: rsmi_dev_perf_level_t = 256;
pub type rsmi_dev_perf_level_t = ::std::os::raw::c_uint;
pub use self::rsmi_dev_perf_level_t as rsmi_dev_perf_level;
pub const rsmi_sw_component_t_RSMI_SW_COMP_FIRST: rsmi_sw_component_t = 0;
pub const rsmi_sw_component_t_RSMI_SW_COMP_DRIVER: rsmi_sw_component_t = 0;
pub const rsmi_sw_component_t_RSMI_SW_COMP_LAST: rsmi_sw_component_t = 0;
pub type rsmi_sw_component_t = ::std::os::raw::c_uint;
pub type rsmi_event_handle_t = usize;
pub const rsmi_event_group_t_RSMI_EVNT_GRP_XGMI: rsmi_event_group_t = 0;
pub const rsmi_event_group_t_RSMI_EVNT_GRP_XGMI_DATA_OUT: rsmi_event_group_t = 10;
pub const rsmi_event_group_t_RSMI_EVNT_GRP_INVALID: rsmi_event_group_t = 4294967295;
pub type rsmi_event_group_t = ::std::os::raw::c_uint;
pub const rsmi_event_type_t_RSMI_EVNT_FIRST: rsmi_event_type_t = 0;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_FIRST: rsmi_event_type_t = 0;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_0_NOP_TX: rsmi_event_type_t = 0;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_0_REQUEST_TX: rsmi_event_type_t = 1;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_0_RESPONSE_TX: rsmi_event_type_t = 2;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_0_BEATS_TX: rsmi_event_type_t = 3;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_1_NOP_TX: rsmi_event_type_t = 4;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_1_REQUEST_TX: rsmi_event_type_t = 5;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_1_RESPONSE_TX: rsmi_event_type_t = 6;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_1_BEATS_TX: rsmi_event_type_t = 7;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_LAST: rsmi_event_type_t = 7;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_DATA_OUT_FIRST: rsmi_event_type_t = 10;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_DATA_OUT_0: rsmi_event_type_t = 10;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_DATA_OUT_1: rsmi_event_type_t = 11;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_DATA_OUT_2: rsmi_event_type_t = 12;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_DATA_OUT_3: rsmi_event_type_t = 13;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_DATA_OUT_4: rsmi_event_type_t = 14;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_DATA_OUT_5: rsmi_event_type_t = 15;
pub const rsmi_event_type_t_RSMI_EVNT_XGMI_DATA_OUT_LAST: rsmi_event_type_t = 15;
pub const rsmi_event_type_t_RSMI_EVNT_LAST: rsmi_event_type_t = 15;
pub type rsmi_event_type_t = ::std::os::raw::c_uint;
pub const rsmi_counter_command_t_RSMI_CNTR_CMD_START: rsmi_counter_command_t = 0;
pub const rsmi_counter_command_t_RSMI_CNTR_CMD_STOP: rsmi_counter_command_t = 1;
pub type rsmi_counter_command_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsmi_counter_value_t {
    pub value: u64,
    pub time_enabled: u64,
    pub time_running: u64,
}
pub const rsmi_evt_notification_type_t_RSMI_EVT_NOTIF_VMFAULT: rsmi_evt_notification_type_t = 1;
pub const rsmi_evt_notification_type_t_RSMI_EVT_NOTIF_FIRST: rsmi_evt_notification_type_t = 1;
pub const rsmi_evt_notification_type_t_RSMI_EVT_NOTIF_THERMAL_THROTTLE:
    rsmi_evt_notification_type_t = 2;
pub const rsmi_evt_notification_type_t_RSMI_EVT_NOTIF_GPU_PRE_RESET: rsmi_evt_notification_type_t =
    3;
pub const rsmi_evt_notification_type_t_RSMI_EVT_NOTIF_GPU_POST_RESET: rsmi_evt_notification_type_t =
    4;
pub const rsmi_evt_notification_type_t_RSMI_EVT_NOTIF_LAST: rsmi_evt_notification_type_t = 4;
pub type rsmi_evt_notification_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsmi_evt_notification_data_t {
    pub dv_ind: u32,
    pub event: rsmi_evt_notification_type_t,
    pub message: [::std::os::raw::c_char; 64usize],
}
pub const rsmi_clk_type_t_RSMI_CLK_TYPE_SYS: rsmi_clk_type_t = 0;
pub const rsmi_clk_type_t_RSMI_CLK_TYPE_FIRST: rsmi_clk_type_t = 0;
pub const rsmi_clk_type_t_RSMI_CLK_TYPE_DF: rsmi_clk_type_t = 1;
pub const rsmi_clk_type_t_RSMI_CLK_TYPE_DCEF: rsmi_clk_type_t = 2;
pub const rsmi_clk_type_t_RSMI_CLK_TYPE_SOC: rsmi_clk_type_t = 3;
pub const rsmi_clk_type_t_RSMI_CLK_TYPE_MEM: rsmi_clk_type_t = 4;
pub const rsmi_clk_type_t_RSMI_CLK_TYPE_PCIE: rsmi_clk_type_t = 5;
pub const rsmi_clk_type_t_RSMI_CLK_TYPE_LAST: rsmi_clk_type_t = 4;
pub const rsmi_clk_type_t_RSMI_CLK_INVALID: rsmi_clk_type_t = 4294967295;
pub type rsmi_clk_type_t = ::std::os::raw::c_uint;
pub use self::rsmi_clk_type_t as rsmi_clk_type;
pub const rsmi_temperature_metric_t_RSMI_TEMP_CURRENT: rsmi_temperature_metric_t = 0;
pub const rsmi_temperature_metric_t_RSMI_TEMP_FIRST: rsmi_temperature_metric_t = 0;
pub const rsmi_temperature_metric_t_RSMI_TEMP_MAX: rsmi_temperature_metric_t = 1;
pub const rsmi_temperature_metric_t_RSMI_TEMP_MIN: rsmi_temperature_metric_t = 2;
pub const rsmi_temperature_metric_t_RSMI_TEMP_MAX_HYST: rsmi_temperature_metric_t = 3;
pub const rsmi_temperature_metric_t_RSMI_TEMP_MIN_HYST: rsmi_temperature_metric_t = 4;
pub const rsmi_temperature_metric_t_RSMI_TEMP_CRITICAL: rsmi_temperature_metric_t = 5;
pub const rsmi_temperature_metric_t_RSMI_TEMP_CRITICAL_HYST: rsmi_temperature_metric_t = 6;
pub const rsmi_temperature_metric_t_RSMI_TEMP_EMERGENCY: rsmi_temperature_metric_t = 7;
pub const rsmi_temperature_metric_t_RSMI_TEMP_EMERGENCY_HYST: rsmi_temperature_metric_t = 8;
pub const rsmi_temperature_metric_t_RSMI_TEMP_CRIT_MIN: rsmi_temperature_metric_t = 9;
pub const rsmi_temperature_metric_t_RSMI_TEMP_CRIT_MIN_HYST: rsmi_temperature_metric_t = 10;
pub const rsmi_temperature_metric_t_RSMI_TEMP_OFFSET: rsmi_temperature_metric_t = 11;
pub const rsmi_temperature_metric_t_RSMI_TEMP_LOWEST: rsmi_temperature_metric_t = 12;
pub const rsmi_temperature_metric_t_RSMI_TEMP_HIGHEST: rsmi_temperature_metric_t = 13;
pub const rsmi_temperature_metric_t_RSMI_TEMP_LAST: rsmi_temperature_metric_t = 13;
pub type rsmi_temperature_metric_t = ::std::os::raw::c_uint;
pub use self::rsmi_temperature_metric_t as rsmi_temperature_metric;
pub const rsmi_temperature_type_t_RSMI_TEMP_TYPE_FIRST: rsmi_temperature_type_t = 0;
pub const rsmi_temperature_type_t_RSMI_TEMP_TYPE_EDGE: rsmi_temperature_type_t = 0;
pub const rsmi_temperature_type_t_RSMI_TEMP_TYPE_JUNCTION: rsmi_temperature_type_t = 1;
pub const rsmi_temperature_type_t_RSMI_TEMP_TYPE_MEMORY: rsmi_temperature_type_t = 2;
pub const rsmi_temperature_type_t_RSMI_TEMP_TYPE_HBM_0: rsmi_temperature_type_t = 3;
pub const rsmi_temperature_type_t_RSMI_TEMP_TYPE_HBM_1: rsmi_temperature_type_t = 4;
pub const rsmi_temperature_type_t_RSMI_TEMP_TYPE_HBM_2: rsmi_temperature_type_t = 5;
pub const rsmi_temperature_type_t_RSMI_TEMP_TYPE_HBM_3: rsmi_temperature_type_t = 6;
pub const rsmi_temperature_type_t_RSMI_TEMP_TYPE_LAST: rsmi_temperature_type_t = 6;
pub const rsmi_temperature_type_t_RSMI_TEMP_TYPE_INVALID: rsmi_temperature_type_t = 4294967295;
pub type rsmi_temperature_type_t = ::std::os::raw::c_uint;
pub const rsmi_voltage_metric_t_RSMI_VOLT_CURRENT: rsmi_voltage_metric_t = 0;
pub const rsmi_voltage_metric_t_RSMI_VOLT_FIRST: rsmi_voltage_metric_t = 0;
pub const rsmi_voltage_metric_t_RSMI_VOLT_MAX: rsmi_voltage_metric_t = 1;
pub const rsmi_voltage_metric_t_RSMI_VOLT_MIN_CRIT: rsmi_voltage_metric_t = 2;
pub const rsmi_voltage_metric_t_RSMI_VOLT_MIN: rsmi_voltage_metric_t = 3;
pub const rsmi_voltage_metric_t_RSMI_VOLT_MAX_CRIT: rsmi_voltage_metric_t = 4;
pub const rsmi_voltage_metric_t_RSMI_VOLT_AVERAGE: rsmi_voltage_metric_t = 5;
pub const rsmi_voltage_metric_t_RSMI_VOLT_LOWEST: rsmi_voltage_metric_t = 6;
pub const rsmi_voltage_metric_t_RSMI_VOLT_HIGHEST: rsmi_voltage_metric_t = 7;
pub const rsmi_voltage_metric_t_RSMI_VOLT_LAST: rsmi_voltage_metric_t = 7;
pub type rsmi_voltage_metric_t = ::std::os::raw::c_uint;
pub const rsmi_voltage_type_t_RSMI_VOLT_TYPE_FIRST: rsmi_voltage_type_t = 0;
pub const rsmi_voltage_type_t_RSMI_VOLT_TYPE_VDDGFX: rsmi_voltage_type_t = 0;
pub const rsmi_voltage_type_t_RSMI_VOLT_TYPE_LAST: rsmi_voltage_type_t = 0;
pub const rsmi_voltage_type_t_RSMI_VOLT_TYPE_INVALID: rsmi_voltage_type_t = 4294967295;
pub type rsmi_voltage_type_t = ::std::os::raw::c_uint;
pub const rsmi_power_profile_preset_masks_t_RSMI_PWR_PROF_PRST_CUSTOM_MASK:
    rsmi_power_profile_preset_masks_t = 1;
pub const rsmi_power_profile_preset_masks_t_RSMI_PWR_PROF_PRST_VIDEO_MASK:
    rsmi_power_profile_preset_masks_t = 2;
pub const rsmi_power_profile_preset_masks_t_RSMI_PWR_PROF_PRST_POWER_SAVING_MASK:
    rsmi_power_profile_preset_masks_t = 4;
pub const rsmi_power_profile_preset_masks_t_RSMI_PWR_PROF_PRST_COMPUTE_MASK:
    rsmi_power_profile_preset_masks_t = 8;
pub const rsmi_power_profile_preset_masks_t_RSMI_PWR_PROF_PRST_VR_MASK:
    rsmi_power_profile_preset_masks_t = 16;
pub const rsmi_power_profile_preset_masks_t_RSMI_PWR_PROF_PRST_3D_FULL_SCR_MASK:
    rsmi_power_profile_preset_masks_t = 32;
pub const rsmi_power_profile_preset_masks_t_RSMI_PWR_PROF_PRST_BOOTUP_DEFAULT:
    rsmi_power_profile_preset_masks_t = 64;
pub const rsmi_power_profile_preset_masks_t_RSMI_PWR_PROF_PRST_LAST:
    rsmi_power_profile_preset_masks_t = 64;
pub const rsmi_power_profile_preset_masks_t_RSMI_PWR_PROF_PRST_INVALID:
    rsmi_power_profile_preset_masks_t = 18446744073709551615;
pub type rsmi_power_profile_preset_masks_t = ::std::os::raw::c_ulong;
pub use self::rsmi_power_profile_preset_masks_t as rsmi_power_profile_preset_masks;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_INVALID: rsmi_gpu_block_t = 0;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_FIRST: rsmi_gpu_block_t = 1;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_UMC: rsmi_gpu_block_t = 1;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_SDMA: rsmi_gpu_block_t = 2;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_GFX: rsmi_gpu_block_t = 4;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_MMHUB: rsmi_gpu_block_t = 8;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_ATHUB: rsmi_gpu_block_t = 16;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_PCIE_BIF: rsmi_gpu_block_t = 32;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_HDP: rsmi_gpu_block_t = 64;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_XGMI_WAFL: rsmi_gpu_block_t = 128;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_DF: rsmi_gpu_block_t = 256;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_SMN: rsmi_gpu_block_t = 512;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_SEM: rsmi_gpu_block_t = 1024;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_MP0: rsmi_gpu_block_t = 2048;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_MP1: rsmi_gpu_block_t = 4096;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_FUSE: rsmi_gpu_block_t = 8192;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_LAST: rsmi_gpu_block_t = 8192;
pub const rsmi_gpu_block_t_RSMI_GPU_BLOCK_RESERVED: rsmi_gpu_block_t = 9223372036854775808;
pub type rsmi_gpu_block_t = ::std::os::raw::c_ulong;
pub use self::rsmi_gpu_block_t as rsmi_gpu_block;
pub const rsmi_ras_err_state_t_RSMI_RAS_ERR_STATE_NONE: rsmi_ras_err_state_t = 0;
pub const rsmi_ras_err_state_t_RSMI_RAS_ERR_STATE_DISABLED: rsmi_ras_err_state_t = 1;
pub const rsmi_ras_err_state_t_RSMI_RAS_ERR_STATE_PARITY: rsmi_ras_err_state_t = 2;
pub const rsmi_ras_err_state_t_RSMI_RAS_ERR_STATE_SING_C: rsmi_ras_err_state_t = 3;
pub const rsmi_ras_err_state_t_RSMI_RAS_ERR_STATE_MULT_UC: rsmi_ras_err_state_t = 4;
pub const rsmi_ras_err_state_t_RSMI_RAS_ERR_STATE_POISON: rsmi_ras_err_state_t = 5;
pub const rsmi_ras_err_state_t_RSMI_RAS_ERR_STATE_ENABLED: rsmi_ras_err_state_t = 6;
pub const rsmi_ras_err_state_t_RSMI_RAS_ERR_STATE_LAST: rsmi_ras_err_state_t = 6;
pub const rsmi_ras_err_state_t_RSMI_RAS_ERR_STATE_INVALID: rsmi_ras_err_state_t = 4294967295;
pub type rsmi_ras_err_state_t = ::std::os::raw::c_uint;
pub const rsmi_memory_type_t_RSMI_MEM_TYPE_FIRST: rsmi_memory_type_t = 0;
pub const rsmi_memory_type_t_RSMI_MEM_TYPE_VRAM: rsmi_memory_type_t = 0;
pub const rsmi_memory_type_t_RSMI_MEM_TYPE_VIS_VRAM: rsmi_memory_type_t = 1;
pub const rsmi_memory_type_t_RSMI_MEM_TYPE_GTT: rsmi_memory_type_t = 2;
pub const rsmi_memory_type_t_RSMI_MEM_TYPE_LAST: rsmi_memory_type_t = 2;
pub type rsmi_memory_type_t = ::std::os::raw::c_uint;
pub const rsmi_freq_ind_t_RSMI_FREQ_IND_MIN: rsmi_freq_ind_t = 0;
pub const rsmi_freq_ind_t_RSMI_FREQ_IND_MAX: rsmi_freq_ind_t = 1;
pub const rsmi_freq_ind_t_RSMI_FREQ_IND_INVALID: rsmi_freq_ind_t = 4294967295;
pub type rsmi_freq_ind_t = ::std::os::raw::c_uint;
pub use self::rsmi_freq_ind_t as rsmi_freq_ind;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_FIRST: rsmi_fw_block_t = 0;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_ASD: rsmi_fw_block_t = 0;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_CE: rsmi_fw_block_t = 1;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_DMCU: rsmi_fw_block_t = 2;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_MC: rsmi_fw_block_t = 3;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_ME: rsmi_fw_block_t = 4;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_MEC: rsmi_fw_block_t = 5;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_MEC2: rsmi_fw_block_t = 6;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_PFP: rsmi_fw_block_t = 7;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_RLC: rsmi_fw_block_t = 8;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_RLC_SRLC: rsmi_fw_block_t = 9;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_RLC_SRLG: rsmi_fw_block_t = 10;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_RLC_SRLS: rsmi_fw_block_t = 11;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_SDMA: rsmi_fw_block_t = 12;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_SDMA2: rsmi_fw_block_t = 13;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_SMC: rsmi_fw_block_t = 14;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_SOS: rsmi_fw_block_t = 15;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_TA_RAS: rsmi_fw_block_t = 16;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_TA_XGMI: rsmi_fw_block_t = 17;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_UVD: rsmi_fw_block_t = 18;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_VCE: rsmi_fw_block_t = 19;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_VCN: rsmi_fw_block_t = 20;
pub const rsmi_fw_block_t_RSMI_FW_BLOCK_LAST: rsmi_fw_block_t = 20;
pub type rsmi_fw_block_t = ::std::os::raw::c_uint;
pub const rsmi_xgmi_status_t_RSMI_XGMI_STATUS_NO_ERRORS: rsmi_xgmi_status_t = 0;
pub const rsmi_xgmi_status_t_RSMI_XGMI_STATUS_ERROR: rsmi_xgmi_status_t = 1;
pub const rsmi_xgmi_status_t_RSMI_XGMI_STATUS_MULTIPLE_ERRORS: rsmi_xgmi_status_t = 2;
pub type rsmi_xgmi_status_t = ::std::os::raw::c_uint;
pub type rsmi_bit_field_t = u64;
pub type rsmi_bit_field = rsmi_bit_field_t;
pub const rsmi_memory_page_status_t_RSMI_MEM_PAGE_STATUS_RESERVED: rsmi_memory_page_status_t = 0;
pub const rsmi_memory_page_status_t_RSMI_MEM_PAGE_STATUS_PENDING: rsmi_memory_page_status_t = 1;
pub const rsmi_memory_page_status_t_RSMI_MEM_PAGE_STATUS_UNRESERVABLE: rsmi_memory_page_status_t =
    2;
pub type rsmi_memory_page_status_t = ::std::os::raw::c_uint;
pub const _RSMI_IO_LINK_TYPE_RSMI_IOLINK_TYPE_UNDEFINED: _RSMI_IO_LINK_TYPE = 0;
pub const _RSMI_IO_LINK_TYPE_RSMI_IOLINK_TYPE_PCIEXPRESS: _RSMI_IO_LINK_TYPE = 1;
pub const _RSMI_IO_LINK_TYPE_RSMI_IOLINK_TYPE_XGMI: _RSMI_IO_LINK_TYPE = 2;
pub const _RSMI_IO_LINK_TYPE_RSMI_IOLINK_TYPE_NUMIOLINKTYPES: _RSMI_IO_LINK_TYPE = 3;
pub const _RSMI_IO_LINK_TYPE_RSMI_IOLINK_TYPE_SIZE: _RSMI_IO_LINK_TYPE = 4294967295;
pub type _RSMI_IO_LINK_TYPE = ::std::os::raw::c_uint;
pub use self::_RSMI_IO_LINK_TYPE as RSMI_IO_LINK_TYPE;
pub const RSMI_UTILIZATION_COUNTER_TYPE_RSMI_UTILIZATION_COUNTER_FIRST:
    RSMI_UTILIZATION_COUNTER_TYPE = 0;
pub const RSMI_UTILIZATION_COUNTER_TYPE_RSMI_COARSE_GRAIN_GFX_ACTIVITY:
    RSMI_UTILIZATION_COUNTER_TYPE = 0;
pub const RSMI_UTILIZATION_COUNTER_TYPE_RSMI_COARSE_GRAIN_MEM_ACTIVITY:
    RSMI_UTILIZATION_COUNTER_TYPE = 1;
pub const RSMI_UTILIZATION_COUNTER_TYPE_RSMI_UTILIZATION_COUNTER_LAST:
    RSMI_UTILIZATION_COUNTER_TYPE = 1;
pub type RSMI_UTILIZATION_COUNTER_TYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsmi_utilization_counter_t {
    pub type_: RSMI_UTILIZATION_COUNTER_TYPE,
    pub value: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsmi_retired_page_record_t {
    pub page_address: u64,
    pub page_size: u64,
    pub status: rsmi_memory_page_status_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsmi_power_profile_status_t {
    pub available_profiles: rsmi_bit_field_t,
    pub current: rsmi_power_profile_preset_masks_t,
    pub num_profiles: u32,
}
pub type rsmi_power_profile_status = rsmi_power_profile_status_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsmi_frequencies_t {
    pub num_supported: u32,
    pub current: u32,
    pub frequency: [u64; 32usize],
}
pub type rsmi_frequencies = rsmi_frequencies_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsmi_pcie_bandwidth_t {
    pub transfer_rate: rsmi_frequencies_t,
    pub lanes: [u32; 32usize],
}
pub type rsmi_pcie_bandwidth = rsmi_pcie_bandwidth_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsmi_version_t {
    pub major: u32,
    pub minor: u32,
    pub patch: u32,
    pub build: *const ::std::os::raw::c_char,
}
pub type rsmi_version = rsmi_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsmi_range_t {
    pub lower_bound: u64,
    pub upper_bound: u64,
}
pub type rsmi_range = rsmi_range_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsmi_od_vddc_point_t {
    pub frequency: u64,
    pub voltage: u64,
}
pub type rsmi_od_vddc_point = rsmi_od_vddc_point_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsmi_freq_volt_region_t {
    pub freq_range: rsmi_range_t,
    pub volt_range: rsmi_range_t,
}
pub type rsmi_freq_volt_region = rsmi_freq_volt_region_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsmi_od_volt_curve_t {
    pub vc_points: [rsmi_od_vddc_point_t; 3usize],
}
pub type rsmi_od_volt_curve = rsmi_od_volt_curve_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsmi_od_volt_freq_data_t {
    pub curr_sclk_range: rsmi_range_t,
    pub curr_mclk_range: rsmi_range_t,
    pub sclk_freq_limits: rsmi_range_t,
    pub mclk_freq_limits: rsmi_range_t,
    pub curve: rsmi_od_volt_curve_t,
    pub num_regions: u32,
}
pub type rsmi_od_volt_freq_data = rsmi_od_volt_freq_data_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct metrics_table_header_t {
    pub structure_size: u16,
    pub format_revision: u8,
    pub content_revision: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsmi_gpu_metrics_t {
    pub common_header: metrics_table_header_t,
    pub temperature_edge: u16,
    pub temperature_hotspot: u16,
    pub temperature_mem: u16,
    pub temperature_vrgfx: u16,
    pub temperature_vrsoc: u16,
    pub temperature_vrmem: u16,
    pub average_gfx_activity: u16,
    pub average_umc_activity: u16,
    pub average_mm_activity: u16,
    pub average_socket_power: u16,
    pub energy_accumulator: u64,
    pub system_clock_counter: u64,
    pub average_gfxclk_frequency: u16,
    pub average_socclk_frequency: u16,
    pub average_uclk_frequency: u16,
    pub average_vclk0_frequency: u16,
    pub average_dclk0_frequency: u16,
    pub average_vclk1_frequency: u16,
    pub average_dclk1_frequency: u16,
    pub current_gfxclk: u16,
    pub current_socclk: u16,
    pub current_uclk: u16,
    pub current_vclk0: u16,
    pub current_dclk0: u16,
    pub current_vclk1: u16,
    pub current_dclk1: u16,
    pub throttle_status: u32,
    pub current_fan_speed: u16,
    pub pcie_link_width: u16,
    pub pcie_link_speed: u16,
    pub padding: u16,
    pub gfx_activity_acc: u32,
    pub mem_actvity_acc: u32,
    pub temperature_hbm: [u16; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsmi_error_count_t {
    pub correctable_err: u64,
    pub uncorrectable_err: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsmi_process_info_t {
    pub process_id: u32,
    pub pasid: u32,
    pub vram_usage: u64,
    pub sdma_usage: u64,
    pub cu_occupancy: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsmi_func_id_iter_handle {
    _unused: [u8; 0],
}
pub type rsmi_func_id_iter_handle_t = *mut rsmi_func_id_iter_handle;
#[repr(C)]
#[derive(Copy, Clone)]
pub union id {
    pub id: u64,
    pub name: *const ::std::os::raw::c_char,
    pub __bindgen_anon_1: id__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union id__bindgen_ty_1 {
    pub memory_type: rsmi_memory_type_t,
    pub temp_metric: rsmi_temperature_metric_t,
    pub evnt_type: rsmi_event_type_t,
    pub evnt_group: rsmi_event_group_t,
    pub clk_type: rsmi_clk_type_t,
    pub fw_block: rsmi_fw_block_t,
    pub gpu_block_type: rsmi_gpu_block_t,
}
pub type rsmi_func_id_value_t = id;
extern crate libloading;
pub struct RsmiLib {
    __library: ::libloading::Library,
    pub rsmi_init:
        Result<unsafe extern "C" fn(init_flags: u64) -> rsmi_status_t, ::libloading::Error>,
    pub rsmi_shut_down: Result<unsafe extern "C" fn() -> rsmi_status_t, ::libloading::Error>,
    pub rsmi_num_monitor_devices:
        Result<unsafe extern "C" fn(num_devices: *mut u32) -> rsmi_status_t, ::libloading::Error>,
    pub rsmi_dev_id_get: Result<
        unsafe extern "C" fn(dv_ind: u32, id: *mut u16) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_sku_get: Result<
        unsafe extern "C" fn(dv_ind: u32, sku: *mut ::std::os::raw::c_char) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_vendor_id_get: Result<
        unsafe extern "C" fn(dv_ind: u32, id: *mut u16) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_name_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            name: *mut ::std::os::raw::c_char,
            len: size_t,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_brand_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            brand: *mut ::std::os::raw::c_char,
            len: u32,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_vendor_name_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            name: *mut ::std::os::raw::c_char,
            len: size_t,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_vram_vendor_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            brand: *mut ::std::os::raw::c_char,
            len: u32,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_serial_number_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            serial_num: *mut ::std::os::raw::c_char,
            len: u32,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_subsystem_id_get: Result<
        unsafe extern "C" fn(dv_ind: u32, id: *mut u16) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_subsystem_name_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            name: *mut ::std::os::raw::c_char,
            len: size_t,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_drm_render_minor_get: Result<
        unsafe extern "C" fn(dv_ind: u32, minor: *mut u32) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_subsystem_vendor_id_get: Result<
        unsafe extern "C" fn(dv_ind: u32, id: *mut u16) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_unique_id_get: Result<
        unsafe extern "C" fn(dv_ind: u32, id: *mut u64) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_pci_bandwidth_get: Result<
        unsafe extern "C" fn(dv_ind: u32, bandwidth: *mut rsmi_pcie_bandwidth_t) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_pci_id_get: Result<
        unsafe extern "C" fn(dv_ind: u32, bdfid: *mut u64) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_topo_numa_affinity_get: Result<
        unsafe extern "C" fn(dv_ind: u32, numa_node: *mut u32) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_pci_throughput_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            sent: *mut u64,
            received: *mut u64,
            max_pkt_sz: *mut u64,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_pci_replay_counter_get: Result<
        unsafe extern "C" fn(dv_ind: u32, counter: *mut u64) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_pci_bandwidth_set: Result<
        unsafe extern "C" fn(dv_ind: u32, bw_bitmask: u64) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_power_ave_get: Result<
        unsafe extern "C" fn(dv_ind: u32, sensor_ind: u32, power: *mut u64) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_energy_count_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            power: *mut u64,
            counter_resolution: *mut f32,
            timestamp: *mut u64,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_power_cap_get: Result<
        unsafe extern "C" fn(dv_ind: u32, sensor_ind: u32, cap: *mut u64) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_power_cap_default_get: Result<
        unsafe extern "C" fn(dv_ind: u32, default_cap: *mut u64) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_power_cap_range_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            sensor_ind: u32,
            max: *mut u64,
            min: *mut u64,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_power_cap_set: Result<
        unsafe extern "C" fn(dv_ind: u32, sensor_ind: u32, cap: u64) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_power_profile_set: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            reserved: u32,
            profile: rsmi_power_profile_preset_masks_t,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_memory_total_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            mem_type: rsmi_memory_type_t,
            total: *mut u64,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_memory_usage_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            mem_type: rsmi_memory_type_t,
            used: *mut u64,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_memory_busy_percent_get: Result<
        unsafe extern "C" fn(dv_ind: u32, busy_percent: *mut u32) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_memory_reserved_pages_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            num_pages: *mut u32,
            records: *mut rsmi_retired_page_record_t,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_fan_rpms_get: Result<
        unsafe extern "C" fn(dv_ind: u32, sensor_ind: u32, speed: *mut i64) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_fan_speed_get: Result<
        unsafe extern "C" fn(dv_ind: u32, sensor_ind: u32, speed: *mut i64) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_fan_speed_max_get: Result<
        unsafe extern "C" fn(dv_ind: u32, sensor_ind: u32, max_speed: *mut u64) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_temp_metric_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            sensor_type: u32,
            metric: rsmi_temperature_metric_t,
            temperature: *mut i64,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_volt_metric_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            sensor_type: rsmi_voltage_type_t,
            metric: rsmi_voltage_metric_t,
            voltage: *mut i64,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_fan_reset: Result<
        unsafe extern "C" fn(dv_ind: u32, sensor_ind: u32) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_fan_speed_set: Result<
        unsafe extern "C" fn(dv_ind: u32, sensor_ind: u32, speed: u64) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_busy_percent_get: Result<
        unsafe extern "C" fn(dv_ind: u32, busy_percent: *mut u32) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_utilization_count_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            utilization_counters: *mut rsmi_utilization_counter_t,
            count: u32,
            timestamp: *mut u64,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_perf_level_get: Result<
        unsafe extern "C" fn(dv_ind: u32, perf: *mut rsmi_dev_perf_level_t) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_perf_determinism_mode_set: Result<
        unsafe extern "C" fn(dv_ind: u32, clkvalue: u64) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_overdrive_level_get: Result<
        unsafe extern "C" fn(dv_ind: u32, od: *mut u32) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_gpu_clk_freq_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            clk_type: rsmi_clk_type_t,
            f: *mut rsmi_frequencies_t,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_gpu_reset:
        Result<unsafe extern "C" fn(dv_ind: i32) -> rsmi_status_t, ::libloading::Error>,
    pub rsmi_dev_od_volt_info_get: Result<
        unsafe extern "C" fn(dv_ind: u32, odv: *mut rsmi_od_volt_freq_data_t) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_gpu_metrics_info_get: Result<
        unsafe extern "C" fn(dv_ind: u32, pgpu_metrics: *mut rsmi_gpu_metrics_t) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_clk_range_set: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            minclkvalue: u64,
            maxclkvalue: u64,
            clkType: rsmi_clk_type_t,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_od_clk_info_set: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            level: rsmi_freq_ind_t,
            clkvalue: u64,
            clkType: rsmi_clk_type_t,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_od_volt_info_set: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            vpoint: u32,
            clkvalue: u64,
            voltvalue: u64,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_od_volt_curve_regions_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            num_regions: *mut u32,
            buffer: *mut rsmi_freq_volt_region_t,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_power_profile_presets_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            sensor_ind: u32,
            status: *mut rsmi_power_profile_status_t,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_perf_level_set: Result<
        unsafe extern "C" fn(dv_ind: i32, perf_lvl: rsmi_dev_perf_level_t) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_perf_level_set_v1: Result<
        unsafe extern "C" fn(dv_ind: u32, perf_lvl: rsmi_dev_perf_level_t) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_overdrive_level_set:
        Result<unsafe extern "C" fn(dv_ind: i32, od: u32) -> rsmi_status_t, ::libloading::Error>,
    pub rsmi_dev_overdrive_level_set_v1:
        Result<unsafe extern "C" fn(dv_ind: u32, od: u32) -> rsmi_status_t, ::libloading::Error>,
    pub rsmi_dev_gpu_clk_freq_set: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            clk_type: rsmi_clk_type_t,
            freq_bitmask: u64,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_version_get: Result<
        unsafe extern "C" fn(version: *mut rsmi_version_t) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_version_str_get: Result<
        unsafe extern "C" fn(
            component: rsmi_sw_component_t,
            ver_str: *mut ::std::os::raw::c_char,
            len: u32,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_vbios_version_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            vbios: *mut ::std::os::raw::c_char,
            len: u32,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_firmware_version_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            block: rsmi_fw_block_t,
            fw_version: *mut u64,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_ecc_count_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            block: rsmi_gpu_block_t,
            ec: *mut rsmi_error_count_t,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_ecc_enabled_get: Result<
        unsafe extern "C" fn(dv_ind: u32, enabled_blocks: *mut u64) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_ecc_status_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            block: rsmi_gpu_block_t,
            state: *mut rsmi_ras_err_state_t,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_status_string: Result<
        unsafe extern "C" fn(
            status: rsmi_status_t,
            status_string: *mut *const ::std::os::raw::c_char,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_counter_group_supported: Result<
        unsafe extern "C" fn(dv_ind: u32, group: rsmi_event_group_t) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_counter_create: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            type_: rsmi_event_type_t,
            evnt_handle: *mut rsmi_event_handle_t,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_counter_destroy: Result<
        unsafe extern "C" fn(evnt_handle: rsmi_event_handle_t) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_counter_control: Result<
        unsafe extern "C" fn(
            evt_handle: rsmi_event_handle_t,
            cmd: rsmi_counter_command_t,
            cmd_args: *mut ::std::os::raw::c_void,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_counter_read: Result<
        unsafe extern "C" fn(
            evt_handle: rsmi_event_handle_t,
            value: *mut rsmi_counter_value_t,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_counter_available_counters_get: Result<
        unsafe extern "C" fn(
            dv_ind: u32,
            grp: rsmi_event_group_t,
            available: *mut u32,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_compute_process_info_get: Result<
        unsafe extern "C" fn(procs: *mut rsmi_process_info_t, num_items: *mut u32) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_compute_process_info_by_pid_get: Result<
        unsafe extern "C" fn(pid: u32, proc_: *mut rsmi_process_info_t) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_compute_process_gpus_get: Result<
        unsafe extern "C" fn(
            pid: u32,
            dv_indices: *mut u32,
            num_devices: *mut u32,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_xgmi_error_status: Result<
        unsafe extern "C" fn(dv_ind: u32, status: *mut rsmi_xgmi_status_t) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_xgmi_error_reset:
        Result<unsafe extern "C" fn(dv_ind: u32) -> rsmi_status_t, ::libloading::Error>,
    pub rsmi_dev_xgmi_hive_id_get: Result<
        unsafe extern "C" fn(dv_ind: u32, hive_id: *mut u64) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_topo_get_numa_node_number: Result<
        unsafe extern "C" fn(dv_ind: u32, numa_node: *mut u32) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_topo_get_link_weight: Result<
        unsafe extern "C" fn(dv_ind_src: u32, dv_ind_dst: u32, weight: *mut u64) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_minmax_bandwidth_get: Result<
        unsafe extern "C" fn(
            dv_ind_src: u32,
            dv_ind_dst: u32,
            min_bandwidth: *mut u64,
            max_bandwidth: *mut u64,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_topo_get_link_type: Result<
        unsafe extern "C" fn(
            dv_ind_src: u32,
            dv_ind_dst: u32,
            hops: *mut u64,
            type_: *mut RSMI_IO_LINK_TYPE,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_is_P2P_accessible: Result<
        unsafe extern "C" fn(
            dv_ind_src: u32,
            dv_ind_dst: u32,
            accessible: *mut bool,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_supported_func_iterator_open: Result<
        unsafe extern "C" fn(dv_ind: u32, handle: *mut rsmi_func_id_iter_handle_t) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_supported_variant_iterator_open: Result<
        unsafe extern "C" fn(
            obj_h: rsmi_func_id_iter_handle_t,
            var_iter: *mut rsmi_func_id_iter_handle_t,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_func_iter_next: Result<
        unsafe extern "C" fn(handle: rsmi_func_id_iter_handle_t) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_dev_supported_func_iterator_close: Result<
        unsafe extern "C" fn(handle: *mut rsmi_func_id_iter_handle_t) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_func_iter_value_get: Result<
        unsafe extern "C" fn(
            handle: rsmi_func_id_iter_handle_t,
            value: *mut rsmi_func_id_value_t,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_event_notification_init:
        Result<unsafe extern "C" fn(dv_ind: u32) -> rsmi_status_t, ::libloading::Error>,
    pub rsmi_event_notification_mask_set:
        Result<unsafe extern "C" fn(dv_ind: u32, mask: u64) -> rsmi_status_t, ::libloading::Error>,
    pub rsmi_event_notification_get: Result<
        unsafe extern "C" fn(
            timeout_ms: ::std::os::raw::c_int,
            num_elem: *mut u32,
            data: *mut rsmi_evt_notification_data_t,
        ) -> rsmi_status_t,
        ::libloading::Error,
    >,
    pub rsmi_event_notification_stop:
        Result<unsafe extern "C" fn(dv_ind: u32) -> rsmi_status_t, ::libloading::Error>,
}
impl RsmiLib {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let rsmi_init = __library.get(b"rsmi_init\0").map(|sym| *sym);
        let rsmi_shut_down = __library.get(b"rsmi_shut_down\0").map(|sym| *sym);
        let rsmi_num_monitor_devices = __library.get(b"rsmi_num_monitor_devices\0").map(|sym| *sym);
        let rsmi_dev_id_get = __library.get(b"rsmi_dev_id_get\0").map(|sym| *sym);
        let rsmi_dev_sku_get = __library.get(b"rsmi_dev_sku_get\0").map(|sym| *sym);
        let rsmi_dev_vendor_id_get = __library.get(b"rsmi_dev_vendor_id_get\0").map(|sym| *sym);
        let rsmi_dev_name_get = __library.get(b"rsmi_dev_name_get\0").map(|sym| *sym);
        let rsmi_dev_brand_get = __library.get(b"rsmi_dev_brand_get\0").map(|sym| *sym);
        let rsmi_dev_vendor_name_get = __library.get(b"rsmi_dev_vendor_name_get\0").map(|sym| *sym);
        let rsmi_dev_vram_vendor_get = __library.get(b"rsmi_dev_vram_vendor_get\0").map(|sym| *sym);
        let rsmi_dev_serial_number_get = __library
            .get(b"rsmi_dev_serial_number_get\0")
            .map(|sym| *sym);
        let rsmi_dev_subsystem_id_get = __library
            .get(b"rsmi_dev_subsystem_id_get\0")
            .map(|sym| *sym);
        let rsmi_dev_subsystem_name_get = __library
            .get(b"rsmi_dev_subsystem_name_get\0")
            .map(|sym| *sym);
        let rsmi_dev_drm_render_minor_get = __library
            .get(b"rsmi_dev_drm_render_minor_get\0")
            .map(|sym| *sym);
        let rsmi_dev_subsystem_vendor_id_get = __library
            .get(b"rsmi_dev_subsystem_vendor_id_get\0")
            .map(|sym| *sym);
        let rsmi_dev_unique_id_get = __library.get(b"rsmi_dev_unique_id_get\0").map(|sym| *sym);
        let rsmi_dev_pci_bandwidth_get = __library
            .get(b"rsmi_dev_pci_bandwidth_get\0")
            .map(|sym| *sym);
        let rsmi_dev_pci_id_get = __library.get(b"rsmi_dev_pci_id_get\0").map(|sym| *sym);
        let rsmi_topo_numa_affinity_get = __library
            .get(b"rsmi_topo_numa_affinity_get\0")
            .map(|sym| *sym);
        let rsmi_dev_pci_throughput_get = __library
            .get(b"rsmi_dev_pci_throughput_get\0")
            .map(|sym| *sym);
        let rsmi_dev_pci_replay_counter_get = __library
            .get(b"rsmi_dev_pci_replay_counter_get\0")
            .map(|sym| *sym);
        let rsmi_dev_pci_bandwidth_set = __library
            .get(b"rsmi_dev_pci_bandwidth_set\0")
            .map(|sym| *sym);
        let rsmi_dev_power_ave_get = __library.get(b"rsmi_dev_power_ave_get\0").map(|sym| *sym);
        let rsmi_dev_energy_count_get = __library
            .get(b"rsmi_dev_energy_count_get\0")
            .map(|sym| *sym);
        let rsmi_dev_power_cap_get = __library.get(b"rsmi_dev_power_cap_get\0").map(|sym| *sym);
        let rsmi_dev_power_cap_default_get = __library
            .get(b"rsmi_dev_power_cap_default_get\0")
            .map(|sym| *sym);
        let rsmi_dev_power_cap_range_get = __library
            .get(b"rsmi_dev_power_cap_range_get\0")
            .map(|sym| *sym);
        let rsmi_dev_power_cap_set = __library.get(b"rsmi_dev_power_cap_set\0").map(|sym| *sym);
        let rsmi_dev_power_profile_set = __library
            .get(b"rsmi_dev_power_profile_set\0")
            .map(|sym| *sym);
        let rsmi_dev_memory_total_get = __library
            .get(b"rsmi_dev_memory_total_get\0")
            .map(|sym| *sym);
        let rsmi_dev_memory_usage_get = __library
            .get(b"rsmi_dev_memory_usage_get\0")
            .map(|sym| *sym);
        let rsmi_dev_memory_busy_percent_get = __library
            .get(b"rsmi_dev_memory_busy_percent_get\0")
            .map(|sym| *sym);
        let rsmi_dev_memory_reserved_pages_get = __library
            .get(b"rsmi_dev_memory_reserved_pages_get\0")
            .map(|sym| *sym);
        let rsmi_dev_fan_rpms_get = __library.get(b"rsmi_dev_fan_rpms_get\0").map(|sym| *sym);
        let rsmi_dev_fan_speed_get = __library.get(b"rsmi_dev_fan_speed_get\0").map(|sym| *sym);
        let rsmi_dev_fan_speed_max_get = __library
            .get(b"rsmi_dev_fan_speed_max_get\0")
            .map(|sym| *sym);
        let rsmi_dev_temp_metric_get = __library.get(b"rsmi_dev_temp_metric_get\0").map(|sym| *sym);
        let rsmi_dev_volt_metric_get = __library.get(b"rsmi_dev_volt_metric_get\0").map(|sym| *sym);
        let rsmi_dev_fan_reset = __library.get(b"rsmi_dev_fan_reset\0").map(|sym| *sym);
        let rsmi_dev_fan_speed_set = __library.get(b"rsmi_dev_fan_speed_set\0").map(|sym| *sym);
        let rsmi_dev_busy_percent_get = __library
            .get(b"rsmi_dev_busy_percent_get\0")
            .map(|sym| *sym);
        let rsmi_utilization_count_get = __library
            .get(b"rsmi_utilization_count_get\0")
            .map(|sym| *sym);
        let rsmi_dev_perf_level_get = __library.get(b"rsmi_dev_perf_level_get\0").map(|sym| *sym);
        let rsmi_perf_determinism_mode_set = __library
            .get(b"rsmi_perf_determinism_mode_set\0")
            .map(|sym| *sym);
        let rsmi_dev_overdrive_level_get = __library
            .get(b"rsmi_dev_overdrive_level_get\0")
            .map(|sym| *sym);
        let rsmi_dev_gpu_clk_freq_get = __library
            .get(b"rsmi_dev_gpu_clk_freq_get\0")
            .map(|sym| *sym);
        let rsmi_dev_gpu_reset = __library.get(b"rsmi_dev_gpu_reset\0").map(|sym| *sym);
        let rsmi_dev_od_volt_info_get = __library
            .get(b"rsmi_dev_od_volt_info_get\0")
            .map(|sym| *sym);
        let rsmi_dev_gpu_metrics_info_get = __library
            .get(b"rsmi_dev_gpu_metrics_info_get\0")
            .map(|sym| *sym);
        let rsmi_dev_clk_range_set = __library.get(b"rsmi_dev_clk_range_set\0").map(|sym| *sym);
        let rsmi_dev_od_clk_info_set = __library.get(b"rsmi_dev_od_clk_info_set\0").map(|sym| *sym);
        let rsmi_dev_od_volt_info_set = __library
            .get(b"rsmi_dev_od_volt_info_set\0")
            .map(|sym| *sym);
        let rsmi_dev_od_volt_curve_regions_get = __library
            .get(b"rsmi_dev_od_volt_curve_regions_get\0")
            .map(|sym| *sym);
        let rsmi_dev_power_profile_presets_get = __library
            .get(b"rsmi_dev_power_profile_presets_get\0")
            .map(|sym| *sym);
        let rsmi_dev_perf_level_set = __library.get(b"rsmi_dev_perf_level_set\0").map(|sym| *sym);
        let rsmi_dev_perf_level_set_v1 = __library
            .get(b"rsmi_dev_perf_level_set_v1\0")
            .map(|sym| *sym);
        let rsmi_dev_overdrive_level_set = __library
            .get(b"rsmi_dev_overdrive_level_set\0")
            .map(|sym| *sym);
        let rsmi_dev_overdrive_level_set_v1 = __library
            .get(b"rsmi_dev_overdrive_level_set_v1\0")
            .map(|sym| *sym);
        let rsmi_dev_gpu_clk_freq_set = __library
            .get(b"rsmi_dev_gpu_clk_freq_set\0")
            .map(|sym| *sym);
        let rsmi_version_get = __library.get(b"rsmi_version_get\0").map(|sym| *sym);
        let rsmi_version_str_get = __library.get(b"rsmi_version_str_get\0").map(|sym| *sym);
        let rsmi_dev_vbios_version_get = __library
            .get(b"rsmi_dev_vbios_version_get\0")
            .map(|sym| *sym);
        let rsmi_dev_firmware_version_get = __library
            .get(b"rsmi_dev_firmware_version_get\0")
            .map(|sym| *sym);
        let rsmi_dev_ecc_count_get = __library.get(b"rsmi_dev_ecc_count_get\0").map(|sym| *sym);
        let rsmi_dev_ecc_enabled_get = __library.get(b"rsmi_dev_ecc_enabled_get\0").map(|sym| *sym);
        let rsmi_dev_ecc_status_get = __library.get(b"rsmi_dev_ecc_status_get\0").map(|sym| *sym);
        let rsmi_status_string = __library.get(b"rsmi_status_string\0").map(|sym| *sym);
        let rsmi_dev_counter_group_supported = __library
            .get(b"rsmi_dev_counter_group_supported\0")
            .map(|sym| *sym);
        let rsmi_dev_counter_create = __library.get(b"rsmi_dev_counter_create\0").map(|sym| *sym);
        let rsmi_dev_counter_destroy = __library.get(b"rsmi_dev_counter_destroy\0").map(|sym| *sym);
        let rsmi_counter_control = __library.get(b"rsmi_counter_control\0").map(|sym| *sym);
        let rsmi_counter_read = __library.get(b"rsmi_counter_read\0").map(|sym| *sym);
        let rsmi_counter_available_counters_get = __library
            .get(b"rsmi_counter_available_counters_get\0")
            .map(|sym| *sym);
        let rsmi_compute_process_info_get = __library
            .get(b"rsmi_compute_process_info_get\0")
            .map(|sym| *sym);
        let rsmi_compute_process_info_by_pid_get = __library
            .get(b"rsmi_compute_process_info_by_pid_get\0")
            .map(|sym| *sym);
        let rsmi_compute_process_gpus_get = __library
            .get(b"rsmi_compute_process_gpus_get\0")
            .map(|sym| *sym);
        let rsmi_dev_xgmi_error_status = __library
            .get(b"rsmi_dev_xgmi_error_status\0")
            .map(|sym| *sym);
        let rsmi_dev_xgmi_error_reset = __library
            .get(b"rsmi_dev_xgmi_error_reset\0")
            .map(|sym| *sym);
        let rsmi_dev_xgmi_hive_id_get = __library
            .get(b"rsmi_dev_xgmi_hive_id_get\0")
            .map(|sym| *sym);
        let rsmi_topo_get_numa_node_number = __library
            .get(b"rsmi_topo_get_numa_node_number\0")
            .map(|sym| *sym);
        let rsmi_topo_get_link_weight = __library
            .get(b"rsmi_topo_get_link_weight\0")
            .map(|sym| *sym);
        let rsmi_minmax_bandwidth_get = __library
            .get(b"rsmi_minmax_bandwidth_get\0")
            .map(|sym| *sym);
        let rsmi_topo_get_link_type = __library.get(b"rsmi_topo_get_link_type\0").map(|sym| *sym);
        let rsmi_is_P2P_accessible = __library.get(b"rsmi_is_P2P_accessible\0").map(|sym| *sym);
        let rsmi_dev_supported_func_iterator_open = __library
            .get(b"rsmi_dev_supported_func_iterator_open\0")
            .map(|sym| *sym);
        let rsmi_dev_supported_variant_iterator_open = __library
            .get(b"rsmi_dev_supported_variant_iterator_open\0")
            .map(|sym| *sym);
        let rsmi_func_iter_next = __library.get(b"rsmi_func_iter_next\0").map(|sym| *sym);
        let rsmi_dev_supported_func_iterator_close = __library
            .get(b"rsmi_dev_supported_func_iterator_close\0")
            .map(|sym| *sym);
        let rsmi_func_iter_value_get = __library.get(b"rsmi_func_iter_value_get\0").map(|sym| *sym);
        let rsmi_event_notification_init = __library
            .get(b"rsmi_event_notification_init\0")
            .map(|sym| *sym);
        let rsmi_event_notification_mask_set = __library
            .get(b"rsmi_event_notification_mask_set\0")
            .map(|sym| *sym);
        let rsmi_event_notification_get = __library
            .get(b"rsmi_event_notification_get\0")
            .map(|sym| *sym);
        let rsmi_event_notification_stop = __library
            .get(b"rsmi_event_notification_stop\0")
            .map(|sym| *sym);
        Ok(RsmiLib {
            __library,
            rsmi_init,
            rsmi_shut_down,
            rsmi_num_monitor_devices,
            rsmi_dev_id_get,
            rsmi_dev_sku_get,
            rsmi_dev_vendor_id_get,
            rsmi_dev_name_get,
            rsmi_dev_brand_get,
            rsmi_dev_vendor_name_get,
            rsmi_dev_vram_vendor_get,
            rsmi_dev_serial_number_get,
            rsmi_dev_subsystem_id_get,
            rsmi_dev_subsystem_name_get,
            rsmi_dev_drm_render_minor_get,
            rsmi_dev_subsystem_vendor_id_get,
            rsmi_dev_unique_id_get,
            rsmi_dev_pci_bandwidth_get,
            rsmi_dev_pci_id_get,
            rsmi_topo_numa_affinity_get,
            rsmi_dev_pci_throughput_get,
            rsmi_dev_pci_replay_counter_get,
            rsmi_dev_pci_bandwidth_set,
            rsmi_dev_power_ave_get,
            rsmi_dev_energy_count_get,
            rsmi_dev_power_cap_get,
            rsmi_dev_power_cap_default_get,
            rsmi_dev_power_cap_range_get,
            rsmi_dev_power_cap_set,
            rsmi_dev_power_profile_set,
            rsmi_dev_memory_total_get,
            rsmi_dev_memory_usage_get,
            rsmi_dev_memory_busy_percent_get,
            rsmi_dev_memory_reserved_pages_get,
            rsmi_dev_fan_rpms_get,
            rsmi_dev_fan_speed_get,
            rsmi_dev_fan_speed_max_get,
            rsmi_dev_temp_metric_get,
            rsmi_dev_volt_metric_get,
            rsmi_dev_fan_reset,
            rsmi_dev_fan_speed_set,
            rsmi_dev_busy_percent_get,
            rsmi_utilization_count_get,
            rsmi_dev_perf_level_get,
            rsmi_perf_determinism_mode_set,
            rsmi_dev_overdrive_level_get,
            rsmi_dev_gpu_clk_freq_get,
            rsmi_dev_gpu_reset,
            rsmi_dev_od_volt_info_get,
            rsmi_dev_gpu_metrics_info_get,
            rsmi_dev_clk_range_set,
            rsmi_dev_od_clk_info_set,
            rsmi_dev_od_volt_info_set,
            rsmi_dev_od_volt_curve_regions_get,
            rsmi_dev_power_profile_presets_get,
            rsmi_dev_perf_level_set,
            rsmi_dev_perf_level_set_v1,
            rsmi_dev_overdrive_level_set,
            rsmi_dev_overdrive_level_set_v1,
            rsmi_dev_gpu_clk_freq_set,
            rsmi_version_get,
            rsmi_version_str_get,
            rsmi_dev_vbios_version_get,
            rsmi_dev_firmware_version_get,
            rsmi_dev_ecc_count_get,
            rsmi_dev_ecc_enabled_get,
            rsmi_dev_ecc_status_get,
            rsmi_status_string,
            rsmi_dev_counter_group_supported,
            rsmi_dev_counter_create,
            rsmi_dev_counter_destroy,
            rsmi_counter_control,
            rsmi_counter_read,
            rsmi_counter_available_counters_get,
            rsmi_compute_process_info_get,
            rsmi_compute_process_info_by_pid_get,
            rsmi_compute_process_gpus_get,
            rsmi_dev_xgmi_error_status,
            rsmi_dev_xgmi_error_reset,
            rsmi_dev_xgmi_hive_id_get,
            rsmi_topo_get_numa_node_number,
            rsmi_topo_get_link_weight,
            rsmi_minmax_bandwidth_get,
            rsmi_topo_get_link_type,
            rsmi_is_P2P_accessible,
            rsmi_dev_supported_func_iterator_open,
            rsmi_dev_supported_variant_iterator_open,
            rsmi_func_iter_next,
            rsmi_dev_supported_func_iterator_close,
            rsmi_func_iter_value_get,
            rsmi_event_notification_init,
            rsmi_event_notification_mask_set,
            rsmi_event_notification_get,
            rsmi_event_notification_stop,
        })
    }
    pub unsafe fn rsmi_init(&self, init_flags: u64) -> rsmi_status_t {
        (self
            .rsmi_init
            .as_ref()
            .expect("Expected function, got error."))(init_flags)
    }
    pub unsafe fn rsmi_shut_down(&self) -> rsmi_status_t {
        (self
            .rsmi_shut_down
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn rsmi_num_monitor_devices(&self, num_devices: *mut u32) -> rsmi_status_t {
        (self
            .rsmi_num_monitor_devices
            .as_ref()
            .expect("Expected function, got error."))(num_devices)
    }
    pub unsafe fn rsmi_dev_id_get(&self, dv_ind: u32, id: *mut u16) -> rsmi_status_t {
        (self
            .rsmi_dev_id_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, id)
    }
    pub unsafe fn rsmi_dev_sku_get(
        &self,
        dv_ind: u32,
        sku: *mut ::std::os::raw::c_char,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_sku_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, sku)
    }
    pub unsafe fn rsmi_dev_vendor_id_get(&self, dv_ind: u32, id: *mut u16) -> rsmi_status_t {
        (self
            .rsmi_dev_vendor_id_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, id)
    }
    pub unsafe fn rsmi_dev_name_get(
        &self,
        dv_ind: u32,
        name: *mut ::std::os::raw::c_char,
        len: size_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_name_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, name, len)
    }
    pub unsafe fn rsmi_dev_brand_get(
        &self,
        dv_ind: u32,
        brand: *mut ::std::os::raw::c_char,
        len: u32,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_brand_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, brand, len)
    }
    pub unsafe fn rsmi_dev_vendor_name_get(
        &self,
        dv_ind: u32,
        name: *mut ::std::os::raw::c_char,
        len: size_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_vendor_name_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, name, len)
    }
    pub unsafe fn rsmi_dev_vram_vendor_get(
        &self,
        dv_ind: u32,
        brand: *mut ::std::os::raw::c_char,
        len: u32,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_vram_vendor_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, brand, len)
    }
    pub unsafe fn rsmi_dev_serial_number_get(
        &self,
        dv_ind: u32,
        serial_num: *mut ::std::os::raw::c_char,
        len: u32,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_serial_number_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, serial_num, len)
    }
    pub unsafe fn rsmi_dev_subsystem_id_get(&self, dv_ind: u32, id: *mut u16) -> rsmi_status_t {
        (self
            .rsmi_dev_subsystem_id_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, id)
    }
    pub unsafe fn rsmi_dev_subsystem_name_get(
        &self,
        dv_ind: u32,
        name: *mut ::std::os::raw::c_char,
        len: size_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_subsystem_name_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, name, len)
    }
    pub unsafe fn rsmi_dev_drm_render_minor_get(
        &self,
        dv_ind: u32,
        minor: *mut u32,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_drm_render_minor_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, minor)
    }
    pub unsafe fn rsmi_dev_subsystem_vendor_id_get(
        &self,
        dv_ind: u32,
        id: *mut u16,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_subsystem_vendor_id_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, id)
    }
    pub unsafe fn rsmi_dev_unique_id_get(&self, dv_ind: u32, id: *mut u64) -> rsmi_status_t {
        (self
            .rsmi_dev_unique_id_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, id)
    }
    pub unsafe fn rsmi_dev_pci_bandwidth_get(
        &self,
        dv_ind: u32,
        bandwidth: *mut rsmi_pcie_bandwidth_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_pci_bandwidth_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, bandwidth)
    }
    pub unsafe fn rsmi_dev_pci_id_get(&self, dv_ind: u32, bdfid: *mut u64) -> rsmi_status_t {
        (self
            .rsmi_dev_pci_id_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, bdfid)
    }
    pub unsafe fn rsmi_topo_numa_affinity_get(
        &self,
        dv_ind: u32,
        numa_node: *mut u32,
    ) -> rsmi_status_t {
        (self
            .rsmi_topo_numa_affinity_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, numa_node)
    }
    pub unsafe fn rsmi_dev_pci_throughput_get(
        &self,
        dv_ind: u32,
        sent: *mut u64,
        received: *mut u64,
        max_pkt_sz: *mut u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_pci_throughput_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, sent, received, max_pkt_sz)
    }
    pub unsafe fn rsmi_dev_pci_replay_counter_get(
        &self,
        dv_ind: u32,
        counter: *mut u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_pci_replay_counter_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, counter)
    }
    pub unsafe fn rsmi_dev_pci_bandwidth_set(&self, dv_ind: u32, bw_bitmask: u64) -> rsmi_status_t {
        (self
            .rsmi_dev_pci_bandwidth_set
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, bw_bitmask)
    }
    pub unsafe fn rsmi_dev_power_ave_get(
        &self,
        dv_ind: u32,
        sensor_ind: u32,
        power: *mut u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_power_ave_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, sensor_ind, power)
    }
    pub unsafe fn rsmi_dev_energy_count_get(
        &self,
        dv_ind: u32,
        power: *mut u64,
        counter_resolution: *mut f32,
        timestamp: *mut u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_energy_count_get
            .as_ref()
            .expect("Expected function, got error."))(
            dv_ind, power, counter_resolution, timestamp
        )
    }
    pub unsafe fn rsmi_dev_power_cap_get(
        &self,
        dv_ind: u32,
        sensor_ind: u32,
        cap: *mut u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_power_cap_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, sensor_ind, cap)
    }
    pub unsafe fn rsmi_dev_power_cap_default_get(
        &self,
        dv_ind: u32,
        default_cap: *mut u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_power_cap_default_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, default_cap)
    }
    pub unsafe fn rsmi_dev_power_cap_range_get(
        &self,
        dv_ind: u32,
        sensor_ind: u32,
        max: *mut u64,
        min: *mut u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_power_cap_range_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, sensor_ind, max, min)
    }
    pub unsafe fn rsmi_dev_power_cap_set(
        &self,
        dv_ind: u32,
        sensor_ind: u32,
        cap: u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_power_cap_set
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, sensor_ind, cap)
    }
    pub unsafe fn rsmi_dev_power_profile_set(
        &self,
        dv_ind: u32,
        reserved: u32,
        profile: rsmi_power_profile_preset_masks_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_power_profile_set
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, reserved, profile)
    }
    pub unsafe fn rsmi_dev_memory_total_get(
        &self,
        dv_ind: u32,
        mem_type: rsmi_memory_type_t,
        total: *mut u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_memory_total_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, mem_type, total)
    }
    pub unsafe fn rsmi_dev_memory_usage_get(
        &self,
        dv_ind: u32,
        mem_type: rsmi_memory_type_t,
        used: *mut u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_memory_usage_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, mem_type, used)
    }
    pub unsafe fn rsmi_dev_memory_busy_percent_get(
        &self,
        dv_ind: u32,
        busy_percent: *mut u32,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_memory_busy_percent_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, busy_percent)
    }
    pub unsafe fn rsmi_dev_memory_reserved_pages_get(
        &self,
        dv_ind: u32,
        num_pages: *mut u32,
        records: *mut rsmi_retired_page_record_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_memory_reserved_pages_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, num_pages, records)
    }
    pub unsafe fn rsmi_dev_fan_rpms_get(
        &self,
        dv_ind: u32,
        sensor_ind: u32,
        speed: *mut i64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_fan_rpms_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, sensor_ind, speed)
    }
    pub unsafe fn rsmi_dev_fan_speed_get(
        &self,
        dv_ind: u32,
        sensor_ind: u32,
        speed: *mut i64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_fan_speed_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, sensor_ind, speed)
    }
    pub unsafe fn rsmi_dev_fan_speed_max_get(
        &self,
        dv_ind: u32,
        sensor_ind: u32,
        max_speed: *mut u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_fan_speed_max_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, sensor_ind, max_speed)
    }
    pub unsafe fn rsmi_dev_temp_metric_get(
        &self,
        dv_ind: u32,
        sensor_type: u32,
        metric: rsmi_temperature_metric_t,
        temperature: *mut i64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_temp_metric_get
            .as_ref()
            .expect("Expected function, got error."))(
            dv_ind, sensor_type, metric, temperature
        )
    }
    pub unsafe fn rsmi_dev_volt_metric_get(
        &self,
        dv_ind: u32,
        sensor_type: rsmi_voltage_type_t,
        metric: rsmi_voltage_metric_t,
        voltage: *mut i64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_volt_metric_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, sensor_type, metric, voltage)
    }
    pub unsafe fn rsmi_dev_fan_reset(&self, dv_ind: u32, sensor_ind: u32) -> rsmi_status_t {
        (self
            .rsmi_dev_fan_reset
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, sensor_ind)
    }
    pub unsafe fn rsmi_dev_fan_speed_set(
        &self,
        dv_ind: u32,
        sensor_ind: u32,
        speed: u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_fan_speed_set
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, sensor_ind, speed)
    }
    pub unsafe fn rsmi_dev_busy_percent_get(
        &self,
        dv_ind: u32,
        busy_percent: *mut u32,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_busy_percent_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, busy_percent)
    }
    pub unsafe fn rsmi_utilization_count_get(
        &self,
        dv_ind: u32,
        utilization_counters: *mut rsmi_utilization_counter_t,
        count: u32,
        timestamp: *mut u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_utilization_count_get
            .as_ref()
            .expect("Expected function, got error."))(
            dv_ind,
            utilization_counters,
            count,
            timestamp,
        )
    }
    pub unsafe fn rsmi_dev_perf_level_get(
        &self,
        dv_ind: u32,
        perf: *mut rsmi_dev_perf_level_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_perf_level_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, perf)
    }
    pub unsafe fn rsmi_perf_determinism_mode_set(
        &self,
        dv_ind: u32,
        clkvalue: u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_perf_determinism_mode_set
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, clkvalue)
    }
    pub unsafe fn rsmi_dev_overdrive_level_get(&self, dv_ind: u32, od: *mut u32) -> rsmi_status_t {
        (self
            .rsmi_dev_overdrive_level_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, od)
    }
    pub unsafe fn rsmi_dev_gpu_clk_freq_get(
        &self,
        dv_ind: u32,
        clk_type: rsmi_clk_type_t,
        f: *mut rsmi_frequencies_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_gpu_clk_freq_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, clk_type, f)
    }
    pub unsafe fn rsmi_dev_gpu_reset(&self, dv_ind: i32) -> rsmi_status_t {
        (self
            .rsmi_dev_gpu_reset
            .as_ref()
            .expect("Expected function, got error."))(dv_ind)
    }
    pub unsafe fn rsmi_dev_od_volt_info_get(
        &self,
        dv_ind: u32,
        odv: *mut rsmi_od_volt_freq_data_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_od_volt_info_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, odv)
    }
    pub unsafe fn rsmi_dev_gpu_metrics_info_get(
        &self,
        dv_ind: u32,
        pgpu_metrics: *mut rsmi_gpu_metrics_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_gpu_metrics_info_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, pgpu_metrics)
    }
    pub unsafe fn rsmi_dev_clk_range_set(
        &self,
        dv_ind: u32,
        minclkvalue: u64,
        maxclkvalue: u64,
        clkType: rsmi_clk_type_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_clk_range_set
            .as_ref()
            .expect("Expected function, got error."))(
            dv_ind, minclkvalue, maxclkvalue, clkType
        )
    }
    pub unsafe fn rsmi_dev_od_clk_info_set(
        &self,
        dv_ind: u32,
        level: rsmi_freq_ind_t,
        clkvalue: u64,
        clkType: rsmi_clk_type_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_od_clk_info_set
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, level, clkvalue, clkType)
    }
    pub unsafe fn rsmi_dev_od_volt_info_set(
        &self,
        dv_ind: u32,
        vpoint: u32,
        clkvalue: u64,
        voltvalue: u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_od_volt_info_set
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, vpoint, clkvalue, voltvalue)
    }
    pub unsafe fn rsmi_dev_od_volt_curve_regions_get(
        &self,
        dv_ind: u32,
        num_regions: *mut u32,
        buffer: *mut rsmi_freq_volt_region_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_od_volt_curve_regions_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, num_regions, buffer)
    }
    pub unsafe fn rsmi_dev_power_profile_presets_get(
        &self,
        dv_ind: u32,
        sensor_ind: u32,
        status: *mut rsmi_power_profile_status_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_power_profile_presets_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, sensor_ind, status)
    }
    pub unsafe fn rsmi_dev_perf_level_set(
        &self,
        dv_ind: i32,
        perf_lvl: rsmi_dev_perf_level_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_perf_level_set
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, perf_lvl)
    }
    pub unsafe fn rsmi_dev_perf_level_set_v1(
        &self,
        dv_ind: u32,
        perf_lvl: rsmi_dev_perf_level_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_perf_level_set_v1
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, perf_lvl)
    }
    pub unsafe fn rsmi_dev_overdrive_level_set(&self, dv_ind: i32, od: u32) -> rsmi_status_t {
        (self
            .rsmi_dev_overdrive_level_set
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, od)
    }
    pub unsafe fn rsmi_dev_overdrive_level_set_v1(&self, dv_ind: u32, od: u32) -> rsmi_status_t {
        (self
            .rsmi_dev_overdrive_level_set_v1
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, od)
    }
    pub unsafe fn rsmi_dev_gpu_clk_freq_set(
        &self,
        dv_ind: u32,
        clk_type: rsmi_clk_type_t,
        freq_bitmask: u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_gpu_clk_freq_set
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, clk_type, freq_bitmask)
    }
    pub unsafe fn rsmi_version_get(&self, version: *mut rsmi_version_t) -> rsmi_status_t {
        (self
            .rsmi_version_get
            .as_ref()
            .expect("Expected function, got error."))(version)
    }
    pub unsafe fn rsmi_version_str_get(
        &self,
        component: rsmi_sw_component_t,
        ver_str: *mut ::std::os::raw::c_char,
        len: u32,
    ) -> rsmi_status_t {
        (self
            .rsmi_version_str_get
            .as_ref()
            .expect("Expected function, got error."))(component, ver_str, len)
    }
    pub unsafe fn rsmi_dev_vbios_version_get(
        &self,
        dv_ind: u32,
        vbios: *mut ::std::os::raw::c_char,
        len: u32,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_vbios_version_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, vbios, len)
    }
    pub unsafe fn rsmi_dev_firmware_version_get(
        &self,
        dv_ind: u32,
        block: rsmi_fw_block_t,
        fw_version: *mut u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_firmware_version_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, block, fw_version)
    }
    pub unsafe fn rsmi_dev_ecc_count_get(
        &self,
        dv_ind: u32,
        block: rsmi_gpu_block_t,
        ec: *mut rsmi_error_count_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_ecc_count_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, block, ec)
    }
    pub unsafe fn rsmi_dev_ecc_enabled_get(
        &self,
        dv_ind: u32,
        enabled_blocks: *mut u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_ecc_enabled_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, enabled_blocks)
    }
    pub unsafe fn rsmi_dev_ecc_status_get(
        &self,
        dv_ind: u32,
        block: rsmi_gpu_block_t,
        state: *mut rsmi_ras_err_state_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_ecc_status_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, block, state)
    }
    pub unsafe fn rsmi_status_string(
        &self,
        status: rsmi_status_t,
        status_string: *mut *const ::std::os::raw::c_char,
    ) -> rsmi_status_t {
        (self
            .rsmi_status_string
            .as_ref()
            .expect("Expected function, got error."))(status, status_string)
    }
    pub unsafe fn rsmi_dev_counter_group_supported(
        &self,
        dv_ind: u32,
        group: rsmi_event_group_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_counter_group_supported
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, group)
    }
    pub unsafe fn rsmi_dev_counter_create(
        &self,
        dv_ind: u32,
        type_: rsmi_event_type_t,
        evnt_handle: *mut rsmi_event_handle_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_counter_create
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, type_, evnt_handle)
    }
    pub unsafe fn rsmi_dev_counter_destroy(
        &self,
        evnt_handle: rsmi_event_handle_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_counter_destroy
            .as_ref()
            .expect("Expected function, got error."))(evnt_handle)
    }
    pub unsafe fn rsmi_counter_control(
        &self,
        evt_handle: rsmi_event_handle_t,
        cmd: rsmi_counter_command_t,
        cmd_args: *mut ::std::os::raw::c_void,
    ) -> rsmi_status_t {
        (self
            .rsmi_counter_control
            .as_ref()
            .expect("Expected function, got error."))(evt_handle, cmd, cmd_args)
    }
    pub unsafe fn rsmi_counter_read(
        &self,
        evt_handle: rsmi_event_handle_t,
        value: *mut rsmi_counter_value_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_counter_read
            .as_ref()
            .expect("Expected function, got error."))(evt_handle, value)
    }
    pub unsafe fn rsmi_counter_available_counters_get(
        &self,
        dv_ind: u32,
        grp: rsmi_event_group_t,
        available: *mut u32,
    ) -> rsmi_status_t {
        (self
            .rsmi_counter_available_counters_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, grp, available)
    }
    pub unsafe fn rsmi_compute_process_info_get(
        &self,
        procs: *mut rsmi_process_info_t,
        num_items: *mut u32,
    ) -> rsmi_status_t {
        (self
            .rsmi_compute_process_info_get
            .as_ref()
            .expect("Expected function, got error."))(procs, num_items)
    }
    pub unsafe fn rsmi_compute_process_info_by_pid_get(
        &self,
        pid: u32,
        proc_: *mut rsmi_process_info_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_compute_process_info_by_pid_get
            .as_ref()
            .expect("Expected function, got error."))(pid, proc_)
    }
    pub unsafe fn rsmi_compute_process_gpus_get(
        &self,
        pid: u32,
        dv_indices: *mut u32,
        num_devices: *mut u32,
    ) -> rsmi_status_t {
        (self
            .rsmi_compute_process_gpus_get
            .as_ref()
            .expect("Expected function, got error."))(pid, dv_indices, num_devices)
    }
    pub unsafe fn rsmi_dev_xgmi_error_status(
        &self,
        dv_ind: u32,
        status: *mut rsmi_xgmi_status_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_xgmi_error_status
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, status)
    }
    pub unsafe fn rsmi_dev_xgmi_error_reset(&self, dv_ind: u32) -> rsmi_status_t {
        (self
            .rsmi_dev_xgmi_error_reset
            .as_ref()
            .expect("Expected function, got error."))(dv_ind)
    }
    pub unsafe fn rsmi_dev_xgmi_hive_id_get(
        &self,
        dv_ind: u32,
        hive_id: *mut u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_xgmi_hive_id_get
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, hive_id)
    }
    pub unsafe fn rsmi_topo_get_numa_node_number(
        &self,
        dv_ind: u32,
        numa_node: *mut u32,
    ) -> rsmi_status_t {
        (self
            .rsmi_topo_get_numa_node_number
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, numa_node)
    }
    pub unsafe fn rsmi_topo_get_link_weight(
        &self,
        dv_ind_src: u32,
        dv_ind_dst: u32,
        weight: *mut u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_topo_get_link_weight
            .as_ref()
            .expect("Expected function, got error."))(dv_ind_src, dv_ind_dst, weight)
    }
    pub unsafe fn rsmi_minmax_bandwidth_get(
        &self,
        dv_ind_src: u32,
        dv_ind_dst: u32,
        min_bandwidth: *mut u64,
        max_bandwidth: *mut u64,
    ) -> rsmi_status_t {
        (self
            .rsmi_minmax_bandwidth_get
            .as_ref()
            .expect("Expected function, got error."))(
            dv_ind_src,
            dv_ind_dst,
            min_bandwidth,
            max_bandwidth,
        )
    }
    pub unsafe fn rsmi_topo_get_link_type(
        &self,
        dv_ind_src: u32,
        dv_ind_dst: u32,
        hops: *mut u64,
        type_: *mut RSMI_IO_LINK_TYPE,
    ) -> rsmi_status_t {
        (self
            .rsmi_topo_get_link_type
            .as_ref()
            .expect("Expected function, got error."))(dv_ind_src, dv_ind_dst, hops, type_)
    }
    pub unsafe fn rsmi_is_P2P_accessible(
        &self,
        dv_ind_src: u32,
        dv_ind_dst: u32,
        accessible: *mut bool,
    ) -> rsmi_status_t {
        (self
            .rsmi_is_P2P_accessible
            .as_ref()
            .expect("Expected function, got error."))(dv_ind_src, dv_ind_dst, accessible)
    }
    pub unsafe fn rsmi_dev_supported_func_iterator_open(
        &self,
        dv_ind: u32,
        handle: *mut rsmi_func_id_iter_handle_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_supported_func_iterator_open
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, handle)
    }
    pub unsafe fn rsmi_dev_supported_variant_iterator_open(
        &self,
        obj_h: rsmi_func_id_iter_handle_t,
        var_iter: *mut rsmi_func_id_iter_handle_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_supported_variant_iterator_open
            .as_ref()
            .expect("Expected function, got error."))(obj_h, var_iter)
    }
    pub unsafe fn rsmi_func_iter_next(&self, handle: rsmi_func_id_iter_handle_t) -> rsmi_status_t {
        (self
            .rsmi_func_iter_next
            .as_ref()
            .expect("Expected function, got error."))(handle)
    }
    pub unsafe fn rsmi_dev_supported_func_iterator_close(
        &self,
        handle: *mut rsmi_func_id_iter_handle_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_dev_supported_func_iterator_close
            .as_ref()
            .expect("Expected function, got error."))(handle)
    }
    pub unsafe fn rsmi_func_iter_value_get(
        &self,
        handle: rsmi_func_id_iter_handle_t,
        value: *mut rsmi_func_id_value_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_func_iter_value_get
            .as_ref()
            .expect("Expected function, got error."))(handle, value)
    }
    pub unsafe fn rsmi_event_notification_init(&self, dv_ind: u32) -> rsmi_status_t {
        (self
            .rsmi_event_notification_init
            .as_ref()
            .expect("Expected function, got error."))(dv_ind)
    }
    pub unsafe fn rsmi_event_notification_mask_set(&self, dv_ind: u32, mask: u64) -> rsmi_status_t {
        (self
            .rsmi_event_notification_mask_set
            .as_ref()
            .expect("Expected function, got error."))(dv_ind, mask)
    }
    pub unsafe fn rsmi_event_notification_get(
        &self,
        timeout_ms: ::std::os::raw::c_int,
        num_elem: *mut u32,
        data: *mut rsmi_evt_notification_data_t,
    ) -> rsmi_status_t {
        (self
            .rsmi_event_notification_get
            .as_ref()
            .expect("Expected function, got error."))(timeout_ms, num_elem, data)
    }
    pub unsafe fn rsmi_event_notification_stop(&self, dv_ind: u32) -> rsmi_status_t {
        (self
            .rsmi_event_notification_stop
            .as_ref()
            .expect("Expected function, got error."))(dv_ind)
    }
}
